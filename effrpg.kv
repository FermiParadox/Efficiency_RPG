#:kivy 1.9.1

#:import main main
#:import datetime datetime
#:import App kivy.app
#:import about_module about_module


<Label>:
    markup: True
    color: 0,0,0,1

<Button>:
    background_normal: 'own_images/simple_grey_button.png'
    background_down: 'own_images/simple_grey_button_pressed.png'
    background_disabled_normal: self.background_down

<GridLayout>:
    grid_background: main.BACKGROUND_COLOR

    canvas.before:
        Color:
            rgba: main.BACKGROUND_COLOR or self.grid_background     # Property is None at initialising raising error
        Rectangle:
            pos: self.pos
            size: self.size

<PaintedLabel>:
    label_background: 0,0,0,0

    canvas.before:
        Color:
            rgba: self.label_background
        Rectangle:
            pos: root.pos
            size: self.size

<ConfinedTextLabel>:
    color: 0,0,0,1
    text_size: self.width * .8, None
    size_hint_y: None
    height: self.texture_size[1]

<ScrollLabel>:
    text: ''
    color: 0,0,0,1
    ConfinedTextLabel:
        text: root.text
        color: root.color

<MyProgressBar>:
    max: 1
    value: 0

    limited_value: min(self.value, self.max)
    # Filled ratio should never be 0 or 1
    # otherwise it would cause size_hints equal to 0,
    # that is, None-type value, resulting in ignoring size_hint
    filled_ratio: max(.00001, min(.9999, float(self.value) / self.max))
    empty_ratio: 1-self.filled_ratio

    size_hint_y: .5
    pos_hint: {'center_x': .5, 'center_y': .5}
    canvas.before:
        Color:
            rgba: root.filled_color
        Rectangle:
            size: root.width * root.filled_ratio, root.height
            pos: root.pos
        Color:
            rgba: root.empty_color
        Rectangle:
            size: root.width * root.empty_ratio, root.height
            pos: root.x + root.width*root.filled_ratio, root.y


<VersionLabel@Label>:
    pos_hint: {'center_x': .8, 'center_y': .07}
    size_hint: .9, .2

    text: '{} {}'.format('version', main.__version__)
    font_size: '12sp'



<SubjectBar>:
    subj_dicts_changed: app.subj_dicts_changed
    max: 1
    on_subj:
        if self.subj.FILLER: self.empty_color = (.2,.2,.2,1); self.filled_color = (0,.4,0,1)
        else: self.empty_color = self.DEFAULT_EMPTY_COLOR; self.filled_color = self.DEFAULT_FILLED_COLOR
    on_subj_dicts_changed: self.subj_dict = getattr(app, self.subj.name())
    on_subj_dicts_changed: self.value = app.subj_goal_ratio_and_time(subj=self.subj)[0]
    value: app.subj_goal_ratio_and_time(subj=self.subj)[0]
    on_subj: self.subj_dict = getattr(app, self.subj.name())


<SubjectBarBox>:
    orientation: 'horizontal'

    Image:
        size_hint_x: .25
        source: root.image_path
    SubjectBar:
        subj: root.subj

<SubjectsBarsBox>:
    orientation: 'vertical'

<ActionImageAndLabels>:
    orientation: 'vertical'

    Image:
        source: main.image_path(im_name=root.action.ICON_IMAGE_NAME)
        size_hint_y: .5
    BoxLayout:
        orientation: 'vertical'
        size_hint_y: .3
        Label:
            text: '{} '.format(root.action.TITLE)
            text_size: self.size
            halign: 'center'
            valign: 'middle'
        Label:
            text: root.action.time_required_as_str()
            text_size: self.size
            halign: 'right'
            valign: 'middle'

<ActionsSlide@BoxLayout>:
    orientation: 'vertical'

<FocusBox@BoxLayout>:
    Image:
        source: main.image_path(im_name='aim.png')
    FocusButton:
        focus_percent: app.focus_percent
        text: '{}%'.format(self.focus_percent)
        on_focus_percent: self.text = '{}%'.format(self.focus_percent)
        on_focus_percent: app.focus_percent = self.focus_percent

<DayLabel>:
    goals: 0
    hours: 0
    focus: 0
    physics_hours: 0
    text: 'Goals: [b]{:.0%}[/b]\nProductive time: [b]{}[/b]\nFocus: [b]{}%[/b]\nPhysics: [b]{}[/b]'.format(self.goals, main.time_as_string(t=self.hours), int(self.focus), main.time_as_string(t=self.physics_hours))

<DayBox>:
    MyProgressBar:
        size_hint: .9,.9
        pos_hint: {'center_x': .5, 'center_y': .5}
        value: root.goals
        max: 1
    DayLabel:
        size_hint: .9,.9
        pos_hint: {'center_x': .5, 'center_y': .5}
        focus_text: '{}%'.format(root.focus) if root.focus else '?'
        text: 'Focus: {}\nGoals: {:.0%}\nPhysics: {}\nTotal: {}'.format(self.focus_text, root.goals, main.time_as_string(t=root.physics_hours), main.time_as_string(t=root.hours))
        font_size: '12sp'

<CalendarPage>:
    orientation: 'vertical'
    app: app

<TodayPage>:
    direction: 'bottom'

<ResetTodayHistoryButton>:
    size_hint: .4, .06
    pos_hint: {'right': .95}
    on_release: app.reset_today_data_and_exit()

<SetHistoryToDefaultButton>:
    app: app
    size_hint: .4, .06
    pos_hint: {'right': .95}

<MainWidget>:
    id: main_widg
    daily_ratio_and_time_and_physics: app.daily_goal_ratio_and_time_and_physics()
    daily_ratio: self.daily_ratio_and_time_and_physics['goals']
    daily_time: self.daily_ratio_and_time_and_physics['productive_hours']
    daily_physics: self.daily_ratio_and_time_and_physics['physics']

    canvas.before:
        Color:
            rgba: main.BACKGROUND_COLOR
        Rectangle:
            pos: self.pos
            size: self.size
 
    on_current_slide: if self.current_slide == calendar_page: calendar_page.populate_or_update_days_grid(); calendar_page.update_averages_label()

    FloatLayout:
        VersionLabel
        Label:
            pos_hint: {'center_x': .5, 'center_y': .8}
            size_hint: .9, .1
            text: main.APP_NAME
            font_size: '30sp'
        BoxLayout:
            pos_hint: {'center_x': .5, 'center_y': .5}
            size_hint: .5, .35
            orientation: 'vertical'

            Button:
                text: 'Today'
                bold: True
                border: [0]*4
                on_release: root.load_slide(today_page)
            Button:
                text: 'Calendar'
                border: [0]*4
                bold: True
                on_release: root.load_slide(calendar_page)
            Button:
                text: 'About'
                border: [0]*4
                on_release: root.load_slide(about_page)
            Button:
                text: 'Citations'
                border: [0]*4
                on_release: root.load_slide(citations_page)
    TodayPage:
        id: today_page

        BoxLayout:
            orientation: 'vertical'
            Label:
                text: datetime.date.today().isoformat()
                size_hint_y: .1
            FloatLayout:
                Button:
                    on_release: today_page.load_slide(subj_selection_slide)
                    pos_hint: {'center_x': .5, 'center_y': .5}
                SubjectsBarsBox:
                    pos_hint: {'center_x': .5, 'center_y': .5}

            FocusBox
                size_hint_y: .2
            Label:
                size_hint_y: .2
                subj_dicts_changed: app.subj_dicts_changed
                bold: True
                text: 'Goals: {:.0%} \nWork hours: {} \nPhysics: {}'.format(root.daily_ratio, main.time_as_string(t=root.daily_time), main.time_as_string(t=root.daily_physics))
                on_subj_dicts_changed: root.daily_ratio_and_time_and_physics = app.daily_goal_ratio_and_time_and_physics()
                text_size: self.size
                halign: 'center'
                valign: 'middle'
        SubjectSelectionSlide
            id: subj_selection_slide
        ActionsSlide:
            SubjectBarBox:
                subj: subj_selection_slide.subj
                size_hint_y: .25
            ActionsGrid:
                id: actions_grid
                size_hint_y: .8
                subj: subj_selection_slide.subj
                on_subj: self.populate_grid()
            ActionTimesBox
                id: action_times_box
                orientation: 'vertical'
                minutes_box: minutes_box
                hours_box: hours_box
                action: actions_grid.action
                on_action: self.set_times_lists()
                subj: subj_selection_slide.subj
                on_subj: self.reset_times_lists()

                Label:
                    text: action_times_box.description
                    size_hint_y: .2
                TimesButtonsBox:
                    id: minutes_box
                    size_hint_y: .15
                    measuring_unit: "'"
                    times_seq: action_times_box.minutes_lst
                TimesButtonsBox:
                    id: hours_box
                    size_hint_y: .15
                    measuring_unit: 'h'
                    times_seq: action_times_box.hours_lst
                BoxLayout:
                    size_hint_y: .17
                    Label:
                        bold: True
                        text: main.time_as_string(t=confirm_button.time_added)
                    ButtonD:
                        size_hint_y: .8
                        id: confirm_button
                        text: 'ok'
                        time_added: minutes_box.time_added + hours_box.time_added
                        on_release: app.modify_action(subj=subj_selection_slide.subj, act=action_times_box.action, time_added=self.time_added)
                        on_release: minutes_box.reset_time_added(time=.3)
                        on_release: hours_box.reset_time_added(time=.3)
                        on_release: self.disable_for(.53)
                    ButtonD:
                        size_hint_y: .8
                        text: 'cancel'
                        on_release: minutes_box.reset_time_added(time=.1)
                        on_release: hours_box.reset_time_added(time=.1)
    CalendarPage:
        id: calendar_page
    BoxLayout:
        id: about_page
        orientation: 'vertical'
        Label:
            size_hint_y: .1
            text: 'About'
            font_size: '20sp'
            bold: True
        ScrollLabel:
            text: about_module.ABOUT_TEXT
    CitationsBox:
        id: citations_page



# PASTE-TEMPLATE
# (copy canvas for debugging)
<RedLabel@Label>:
    canvas.before:
        Color:
            rgba: 1,0,.0,1
        Rectangle:
            pos: self.pos
            size: self.size